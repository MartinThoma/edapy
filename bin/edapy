#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Run the edapy main script."""

# core modules
import io
import os
import sys

# 3rd party modules
import pandas as pd
import yaml

# local modules
from edapy import load_csv
from edapy.describe import describe_pandas_df


def main(csv_path, yaml_path):
    """
    Start the CSV recognizing.

    Parameters
    ----------
    csv_path : str
    yaml_path : str
    """
    csv_path = os.path.abspath(csv_path)
    yaml_path = os.path.abspath(yaml_path)
    if not os.path.isfile(csv_path):
        print("Could not find '{}'.".format(csv_path))
        sys.exit(1)
    if not os.path.isfile(yaml_path):
        reader = pd.read_csv(csv_path, sep=None, iterator=True,
                             engine='python')
        inferred_delimiter = reader._engine.data.dialect.delimiter
        data = {'csv_meta': {'delimiter': inferred_delimiter},
                'columns': []}
        _write_yaml(yaml_path, data)
    else:
        data = _read_yaml(yaml_path)
    df = load_csv(csv_path, yaml_path)
    column_types = describe_pandas_df(df)
    for column_name, column_type in column_types.items():
        data['columns'].append({'name': column_name,
                                'dtype': column_type})
    _write_yaml(yaml_path, data)


def _write_yaml(yaml_path, data):
    with io.open(yaml_path, 'w', encoding='utf8') as outfile:
        yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)


def _read_yaml(yaml_path):
    with open(yaml_path, 'r') as stream:
        data_loaded = yaml.load(stream)
    return data_loaded


def get_parser():
    """Get parser object for edapy."""
    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
    parser = ArgumentParser(description=__doc__,
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('--csv',
                        dest='csv_path',
                        help='CSV file to read',
                        required=True,
                        metavar='FILE')
    parser.add_argument('--types',
                        dest='yaml_path',
                        help='YAML file to read / write',
                        default='types.yaml',
                        metavar='FILE')
    return parser


if __name__ == '__main__':
    args = get_parser().parse_args()
    main(args.csv_path, args.yaml_path)
